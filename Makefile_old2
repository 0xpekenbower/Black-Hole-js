CORE_STACK = core
OBSY_STACK = obsy
MONITORING_STACK = monitoring
BUILD_COMPOSE = build.yml
CORE_COMPOSE = core.yml
OBSY_COMPOSE = obsy.yml
MONITORING_COMPOSE = monitoring.yml
NETWORK_NAME = blackholejs

.PHONY: create-network recreate-network build core-up obsy-up monitoring-up core-down obsy-down monitoring-down core-clean obsy-clean monitoring-clean up down clean restart logs-core logs-nginx logs-obsy logs-monitoring status init-swarm init

# Initialize swarm if not already initialized
init-swarm:
	@if ! docker info --format '{{.Swarm.LocalNodeState}}' | grep -q "active"; then \
		echo "Initializing Docker Swarm..."; \
		docker swarm init || true; \
	else \
		echo "Swarm already active"; \
	fi

# Create network if it doesn't exist
create-network: init-swarm
	@docker network inspect $(NETWORK_NAME) >/dev/null 2>&1 || ( \
		echo "Creating overlay network $(NETWORK_NAME)..."; \
		docker network create --driver overlay --attachable $(NETWORK_NAME) )

# Remove and recreate network (use this if you get network scope errors)
recreate-network:
	@docker network rm $(NETWORK_NAME) 2>/dev/null || true
	@docker network create --driver overlay --attachable $(NETWORK_NAME)

# Build all images
build:
	docker compose -f $(BUILD_COMPOSE) build

# Deploy stacks
core-up: create-network
	docker stack deploy -c $(CORE_COMPOSE) $(CORE_STACK) --detach=false

obsy-up: create-network
	docker stack deploy -c $(OBSY_COMPOSE) $(OBSY_STACK)

monitoring-up: create-network
	docker stack deploy -c $(MONITORING_COMPOSE) $(MONITORING_STACK)

# Remove stacks
core-down:
	docker stack rm $(CORE_STACK)

obsy-down:
	docker stack rm $(OBSY_STACK)

monitoring-down:
	docker stack rm $(MONITORING_STACK)

# Clean up volumes for each stack by prefix
core-clean: core-down
	-docker volume ls -q -f name=$(CORE_STACK) | xargs -r docker volume rm

obsy-clean: obsy-down
	-docker volume ls -q -f name=$(OBSY_STACK) | xargs -r docker volume rm

monitoring-clean: monitoring-down
	-docker volume ls -q -f name=$(MONITORING_STACK) | xargs -r docker volume rm

# Full lifecycle commands
up: core-up obsy-up monitoring-up
down: core-down obsy-down monitoring-down
clean: core-clean obsy-clean monitoring-clean
restart: down up

# Tail logs from specific services
logs-core:
	docker service logs -f $(CORE_STACK)_gateway

logs-nginx:
	docker service logs -f $(CORE_STACK)_nginx

logs-obsy:
	docker service logs -f $(OBSY_STACK)_vector

logs-monitoring:
	docker service logs -f $(MONITORING_STACK)_prometheus

# Show stack status
status:
	@echo "=== STACKS ==="
	@docker stack ls || echo "No stacks found"
	@echo "\n=== SERVICES ==="
	@docker service ls || echo "No services found"

# Full setup: init swarm, create network, build images and deploy all stacks
init: init-swarm create-network build
	@echo "Full setup completed!"
