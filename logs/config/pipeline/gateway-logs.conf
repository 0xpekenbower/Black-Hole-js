input {
  tcp {
    port => 50000
    codec => json
    tags => ["gateway"]
    type => "gateway"
  }
}

filter {
  if "gateway" in [tags] {
    date {
      match => ["time", "ISO8601", "UNIX", "UNIX_MS"]
      target => "@timestamp"
      tag_on_failure => ["_dateparsefailure"]
      remove_field => ["_dateparsefailure"]
    }
    
    prune {
      whitelist_names => ["^@timestamp$", "^time$", "^level$", "^service$", "^message$", "^req$", "^res$", "^error$"]
    }
    
    if [req] {
      if ![req][method] and ![req][url] and ![req][source] and ![req][user_id] and ![req][ip] {
        mutate {
          remove_field => ["[req]"]
        }
      } else {
        ruby {
          code => "
            req = event.get('req')
            if req.is_a?(Hash)
              req.keys.each do |key|
                unless ['method', 'url', 'source', 'user_id', 'ip'].include?(key)
                  event.remove(sprintf('[req][%s]', key))
                end
              end
            end
          "
        }
      }
    }
    
    if [res] {
      if ![res][statusCode] and ![res][source] and ![res][response_time] and ![res][message] {
        mutate {
          remove_field => ["[res]"]
        }
      } else {
        ruby {
          code => "
            res = event.get('res')
            if res.is_a?(Hash)
              res.keys.each do |key|
                unless ['statusCode', 'source', 'response_time', 'message'].include?(key)
                  event.remove(sprintf('[res][%s]', key))
                end
              end
            end
          "
        }
      }
    }
    
    if [error] {
      if ![error][message] and ![error][stack] {
        mutate {
          remove_field => ["[error]"]
        }
      } else {
        ruby {
          code => "
            error = event.get('error')
            if error.is_a?(Hash)
              error.keys.each do |key|
                unless ['message', 'stack'].include?(key)
                  event.remove(sprintf('[error][%s]', key))
                end
              end
            end
          "
        }
      }
    }
    
    mutate {
      remove_field => ["type", "tags", "@version", "host"]
    }
  }
}

output {
  if "gateway" in [tags] {
    elasticsearch {
      hosts => "elasticsearch:9200"
      user => "logstash_internal"
      password => "${LOGSTASH_INTERNAL_PASSWORD}"
      index => "gateway-logs-%{+YYYY.MM.dd}"
      ilm_enabled => true
      ilm_rollover_alias => "gateway-logs"
      ilm_pattern => "{now/d}-000001"
      ilm_policy => "gateway-logs-policy"
    }
  }
} 