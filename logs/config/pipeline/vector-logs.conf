input {
  tcp {
    port => 5044
    codec => json
    tags => ["vector"]
    type => "vector"
  }
}

filter {
  if "vector" in [tags] {
    date {
      match => ["timestamp", "ISO8601", "UNIX", "UNIX_MS"]
      target => "@timestamp"
      tag_on_failure => ["_dateparsefailure"]
      remove_field => ["_dateparsefailure"]
    }
    
    if ![log_type] {
      mutate {
        add_field => { "log_type" => "unknown" }
      }
    }
    
    if ![component] {
      mutate {
        add_field => { "component" => "unknown" }
      }
    }
    
    mutate {
      replace => { "service" => "frontend" }
    }
    
    if [request] {
      grok {
        match => { "request" => "%{WORD:http_method} %{URIPATHPARAM:uri} HTTP/%{NUMBER:http_version}" }
        tag_on_failure => ["_grokparsefailure_request"]
        remove_field => ["_grokparsefailure_request"]
      }
      
      if [uri] {
        grok {
          match => { "uri" => "%{URIPATH:path}(?:\?%{URIQUERY:query_string})?" }
          tag_on_failure => ["_grokparsefailure_uri"]
          remove_field => ["_grokparsefailure_uri"]
        }
      }
    }
  }
}

output {
  if "vector" in [tags] {
    elasticsearch {
      hosts => "elasticsearch:9200"
      user => "logstash_internal"
      password => "${LOGSTASH_INTERNAL_PASSWORD}"
      index => "frontend-logs-%{+YYYY.MM.dd}"
      ilm_enabled => true
      ilm_rollover_alias => "frontend-logs"
      ilm_pattern => "{now/d}-000001"
      ilm_policy => "frontend-logs-policy"
      action => "index"
      manage_template => false
      template_overwrite => false
    }
  }
} 