# version: "3.9"
# services:
#   nginx:
#     image: blackholejs/nginx:latest
#     volumes:
#       - nginx_data:/etc/nginx
#       - logs:/var/log/nginx:rw
#     env_file:
#       - .env
#     ports:
#       - "8080:80"
#     deploy:
#       restart_policy:
#         condition: on-failure
#     networks:
#       - blackholejs

#   redis:
#     image: blackholejs/redis:latest
#     volumes:
#       - redis_data:/data
#       - logs:/var/log/redis:rw
#     env_file:
#       - .env
#     deploy:
#       restart_policy:
#         condition: on-failure
#     networks:
#       - blackholejs

#   postgres_db:
#     image: blackholejs/postgres:latest
#     volumes:
#       - postgres_data:/var/lib/postgresql/data
#       - logs:/var/log/postgres:rw
#     environment:
#       - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
#     command: ["postgres", "-c", "log_statement=all", "-c", "logging_collector=on", "-c", "config_file=/var/lib/postgresql/postgresql.conf"]
#     env_file:
#       - .env
#     deploy:
#       restart_policy:
#         condition: on-failure
#     networks:
#       - blackholejs

#   kafka:
#     image: blackholejs/kafka:latest
#     env_file:
#       - .env
#     environment:
#       - KAFKA_NODE_ID=1
#       - KAFKA_PROCESS_ROLES=broker,controller
#       - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
#       - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
#       - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
#       - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
#       - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
#       - KAFKA_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
#       - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
#       - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
#       - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
#       - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
#       - KAFKA_NUM_PARTITIONS=1
#     volumes:
#       - kafka_data:/var/lib/kafka/data
#       - logs:/var/log/kafka:rw
#     deploy:
#       restart_policy:
#         condition: on-failure
#     networks:
#       - blackholejs

#   gateway:
#     image: blackholejs/gateway:latest
#     env_file:
#       - .env
#     deploy:
#       restart_policy:
#         condition: on-failure
#     networks:
#       - blackholejs

#   auth:
#     image: blackholejs/auth:latest
#     env_file:
#       - .env
#     volumes:
#       - logs:/var/log/auth:rw
#     deploy:
#       restart_policy:
#         condition: on-failure
#     networks:
#       - blackholejs

#   chat:
#     image: blackholejs/chat:latest
#     env_file:
#       - .env
#     volumes:
#       - logs:/var/log/chat:rw
#     deploy:
#       restart_policy:
#         condition: on-failure
#     networks:
#       - blackholejs

#   dash:
#     image: blackholejs/dash:latest
#     env_file:
#       - .env
#     volumes:
#       - logs:/var/log/dash:rw
#     deploy:
#       restart_policy:
#         condition: on-failure
#     networks:
#       - blackholejs

#   game:
#     image: blackholejs/game:latest
#     env_file:
#       - .env
#     volumes:
#       - logs:/var/log/game:rw
#     deploy:
#       restart_policy:
#         condition: on-failure
#     networks:
#       - blackholejs

#   frontend:
#     image: blackholejs/frontend:latest
#     env_file:
#       - .env
#     ports:
#       - "3000:3000"
#     deploy:
#       restart_policy:
#         condition: on-failure
#     networks:
#       - blackholejs

# volumes:
#   redis_data:
#   postgres_data:
#   kafka_data:
#   nginx_data:
#   logs:

# networks:
#   blackholejs:
#     external: true

version: "3.9"
services:
  nginx:
    image: blackholejs/nginx:latest
    volumes:
      - nginx_data:/etc/nginx
      - logs:/var/log/nginx:rw
    env_file:
      - .env
    ports:
      - "8080:80"
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      - internal_net
      - public_net

  redis:
    image: blackholejs/redis:latest
    volumes:
      - redis_data:/data
      - logs:/var/log/redis:rw
    env_file:
      - .env
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      - internal_net

  postgres_db:
    image: blackholejs/postgres:latest
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - logs:/var/log/postgres:rw
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    command: ["postgres", "-c", "log_statement=all", "-c", "logging_collector=on", "-c", "config_file=/var/lib/postgresql/postgresql.conf"]
    env_file:
      - .env
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      - internal_net

  kafka:
    image: blackholejs/kafka:latest
    env_file:
      - .env
    environment:
      - KAFKA_NODE_ID=1
      - KAFKA_PROCESS_ROLES=broker,controller
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
      - KAFKA_NUM_PARTITIONS=1
    volumes:
      - kafka_data:/var/lib/kafka/data
      - logs:/var/log/kafka:rw
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      - internal_net

  gateway:
    image: blackholejs/gateway:latest
    env_file:
      - .env
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      - internal_net

  auth:
    image: blackholejs/auth:latest
    env_file:
      - .env
    volumes:
      - logs:/var/log/auth:rw
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      - internal_net

  chat:
    image: blackholejs/chat:latest
    env_file:
      - .env
    volumes:
      - logs:/var/log/chat:rw
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      - internal_net

  dash:
    image: blackholejs/dash:latest
    env_file:
      - .env
    volumes:
      - logs:/var/log/dash:rw
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      - internal_net

  game:
    image: blackholejs/game:latest
    env_file:
      - .env
    volumes:
      - logs:/var/log/game:rw
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      - internal_net

  frontend:
    image: blackholejs/frontend:latest
    env_file:
      - .env
    # No ports exposed â€” served via nginx
    deploy:
      restart_policy:
        condition: on-failure
    networks:
      - internal_net

volumes:
  redis_data:
  postgres_data:
  kafka_data:
  nginx_data:
  logs:

networks:
  internal_net:
    driver: overlay
  public_net:
    driver: overlay
    attachable: true

