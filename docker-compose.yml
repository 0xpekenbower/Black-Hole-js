services:
  fluentd:
    container_name: fluentd
    build:
      context: ./infra/fluentd
    profiles: [infra]
    restart: on-failure
    command:
      - /fluent-bit/bin/fluent-bit
      - --config=/etc/fluent-bit/fluent-bit.conf
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    networks:
      - blackholejs
    env_file:
      - .env
    volumes:
      - fluentbit_storage:/var/log/flb-storage:rw

  nginx:
    container_name: nginx
    build:
      context: ./infra/nginx
    ports:
      - 443:443
    env_file:
      - .env
    profiles: [infra]
    restart: on-failure
    networks:
      - blackholejs
    volumes:
      - ./certs:/etc/nginx/certs
    logging:
      driver: fluentd
      options:
        tag: "{{.Name}}.log"


  redis:
    container_name: redis
    build:
      context: ./infra/redis
    volumes:
      - redis_data:/data
    profiles: [infra]
    env_file:
      - .env
    restart: on-failure
    networks:
      - blackholejs
    logging:
      driver: fluentd
      options:
        tag: "{{.Name}}.log"

  postgres_db:
    container_name: postgres_db
    build:
      context: ./infra/postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    profiles: [infra]
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    command: ["postgres", "-c", "config_file=/var/lib/postgresql/postgresql.conf"]
    env_file:
      - .env
    restart: on-failure
    networks:
      - blackholejs
    logging:
      driver: fluentd
      options:
        tag: "{{.Name}}.log"
  
  pgadmin:
    container_name: pgadmin
    build:
      context: ./infra/pgadmin
    env_file:
      - .env
    profiles: [pgadmin]
    logging:
      driver: fluentd
      options:
        tag: "{{.Name}}.log"
    networks:
      - blackholejs

  kafka:
    container_name: kafka
    build:
      context: ./infra/kafka
    env_file:
      - .env
    profiles: [infra]
    restart: on-failure
    networks:
      - blackholejs
    logging:
      driver: fluentd
      options:
        tag: "{{.Name}}.log"

  gateway:
    container_name: gateway
    build:
      context: ./infra/gateway
    env_file:
      - .env
    restart: on-failure
    profiles: [core]
    ports:
      - "8000:8000"
    volumes:
      - ./infra/gateway:/gateway
      - /gateway/node_modules
    networks:
      - blackholejs
    logging:
      driver: fluentd
      options:
        tag: "{{.Name}}.log"

  auth:
    container_name: auth
    build:
      context: ./services/auth
    env_file:
      - .env
    environment:
      - FRONTEND_URL=http://blackholejs.art
    profiles: [core]
    restart: on-failure
    depends_on:
      - gateway
    volumes:
      - ./services/auth:/auth
      - /auth/node_modules
    networks:
      - blackholejs
    logging:
      driver: fluentd
      options:
        tag: "{{.Name}}.log"

  chat:
    container_name: chat
    build:
      context: ./services/chat
    profiles: [core]
    env_file:
      - .env
    depends_on:
      - gateway
    restart: on-failure
    networks:
      - blackholejs
    logging:
      driver: fluentd
      options:
        tag: "{{.Name}}.log"

  dash:
    container_name: dash
    build:
      context: ./services/dash
    env_file:
      - .env
    profiles: [core]
    restart: on-failure
    depends_on:
      - gateway
    networks:
      - blackholejs
    volumes:
      - ./services/dash:/dash
      - /dash/node_modules
    logging:
      driver: fluentd
      options:
        tag: "{{.Name}}.log"

  game:
    container_name: game
    build:
      context: ./services/game
    env_file:
      - .env
    profiles: [core]
    restart: on-failure
    ports:
      - "8004:8004"
    depends_on:
      - gateway
    networks:
      - blackholejs
    volumes:
      - ./services/game:/game
      - /game/node_modules
    logging:
      driver: fluentd
      options:
        tag: "{{.Name}}.log"

  frontend:
    container_name: frontend
    build:
      context: ./frontend
    env_file:
      - .env
    profiles: [core]
    restart: on-failure
    networks:
      - blackholejs
    volumes:
      - ./frontend:/app
      - /app/node_modules
    logging:
      driver: fluentd
      options:
        tag: "{{.Name}}.log"

  setup:
    container_name: setup
    build:
      context: ./setup
    env_file:
      - .env
    restart: on-failure
    profiles: [obsy]
    depends_on:
      - elasticsearch
    networks:
      - blackholejs
    logging:
      driver: fluentd
      options:
        tag: "{{.Name}}.log"
        
  elasticsearch:
    container_name: elasticsearch
    build:
      context: ./infra/elasticsearch
    env_file:
      - .env
    profiles: [obsy]
    volumes:
      - elasticsearch:/usr/share/elasticsearch/data:Z
    environment:
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    restart: on-failure
    networks:
      - blackholejs

  logstash:
    container_name: logstash
    build:
      context: ./infra/logstash
    profiles: [obsy]
    environment:
      LOGSTASH_PASSWORD: ${LOGSTASH_PASSWORD:-}
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
    depends_on:
      - elasticsearch
    restart: unless-stopped
    env_file:
      - .env
    networks:
      - blackholejs

  kibana:
    container_name: kibana
    build:
      context: ./infra/kibana
    profiles: [obsy]
    environment:
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
    depends_on:
      - elasticsearch
    restart: unless-stopped
    env_file:
      - .env
    networks:
      - blackholejs
    

  apm-server:
    container_name: apm-server
    build:
      context: ./infra/apm
    profiles: [obsy]
    restart: on-failure
    networks:
      - blackholejs
    env_file:
      - .env

  prometheus:
    container_name: prometheus
    build:
      context: ./infra/prometheus
    restart: on-failure
    profiles: [monitoring]
    volumes:
      - prometheus_data:/prometheus
    env_file:
      - .env
    depends_on:
      - redis_exporter
      - postgres_exporter
      - kafka_exporter
      - nginx_exporter
      - node_exporter
      - cadvisor
    networks:
      - blackholejs

  grafana:
    container_name: grafana
    build:
      context: ./infra/grafana
    restart: on-failure
    profiles: [monitoring]
    env_file:
      - .env
    networks:
      - blackholejs

  cadvisor:
    container_name: cadvisor
    build:
      context: ./infra/cadvisor
    restart: on-failure
    profiles: [monitoring]
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /var/lib/containerd/:/var/lib/containerd:ro
      - /dev/disk/:/dev/disk:ro
    networks:
      - blackholejs

  node_exporter:
    container_name: node_exporter
    build:
      context: ./infra/node_exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
      - /run/systemd:/run/systemd:ro
    profiles: [monitoring]
    command:
      - --path.procfs=/host/proc
      - --path.rootfs=/rootfs
      - --path.sysfs=/host/sys
      - --collector.processes
      - --collector.systemd
      - --collector.filesystem
    restart: unless-stopped
    networks:
      - blackholejs
    pid: host
    privileged: true

  redis_exporter:
    container_name: redis_exporter
    build:
      context: ./infra/redis_exporter
    environment:
      REDIS_ADDR: "redis://redis:6379"
    env_file:
      - .env
    profiles: [monitoring]
    restart: on-failure
    networks:
      - blackholejs

  postgres_exporter:
    container_name: postgres_exporter
    build:
      context: ./infra/postgres_exporter
    environment:
      DATA_SOURCE_NAME: "${DATA_SOURCE_NAME}"
    env_file:
      - .env
    profiles: [monitoring]
    restart: on-failure
    networks:
      - blackholejs

  kafka_exporter:
    container_name: kafka_exporter
    build:
      context: ./infra/kafka_exporter
    command: ["--kafka.server=kafka:9092"]
    profiles: [monitoring]
    environment:
      - KAFKA_BROKERS=kafka:9092
    restart: on-failure
    networks:
      - blackholejs

  nginx_exporter:
    container_name: nginx_exporter
    build:
      context: ./infra/nginx_exporter
    profiles: [monitoring]
    networks:
      - blackholejs
    restart: on-failure
    command:
      - --nginx.scrape-uri=http://nginx:80/stub_status

  mailserver:
    container_name: mailserver
    build:
      context: ./infra/mailserver
    hostname: blackholejs.art
    env_file:
      - .env
    networks:
      - blackholejs
    restart: always
    profiles: [infra]
    ports:
      - "25:25"
      - "587:587"
      - "465:465"
    volumes:
      - mail_data:/var/mail/
      - mail_state:/var/mail-state/
      - mail_logs:/var/log/mail/
      - mail_config:/tmp/docker-mailserver/
      - /etc/localtime:/etc/localtime:ro
      - ./certs:/certs
    cap_add:
      - NET_ADMIN

volumes:
  redis_data:
  postgres_data:
  elasticsearch:
  prometheus_data:
  fluentbit_storage:
  cert:
  mail_data:
  mail_state:
  mail_logs:
  mail_config:

networks:
  blackholejs:
    name: blackholejs
    driver: bridge